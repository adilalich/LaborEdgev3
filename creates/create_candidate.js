const perform = async (z, bundle) => {
  const options = {
    url: 'https://api-nexus.laboredge.com:9000/api/api-integration/v1/candidates',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json',
      Authorization: `Bearer ${bundle.authData.access_token}`,
    },
    params: {},
    body: {
      firstName: bundle.inputData.firstName,
      lastName: bundle.inputData.lastName,
      primaryEmail: bundle.inputData.email,
      phone: bundle.inputData.phone,
      cellPhone: bundle.inputData.cellPhone,
      statusId: bundle.inputData.statusId,
      referralSourceId: bundle.inputData.referralSourceId,
      professionIds: bundle.inputData.professionIds,
      specialtyIds: bundle.inputData.specialtyIds,
      primarySpecialtyId: bundle.inputData.primarySpecialtyId,
      addressLine1: bundle.inputData.addressLine1,
      addressLine2: bundle.inputData.addressLine2,
      stateId: bundle.inputData.stateId,
      city: bundle.inputData.city,
      zip: bundle.inputData.zip,
      countryId: bundle.inputData.countryId,
      yearsOfExperience: bundle.inputData.yearsOfExperience,
      availableFrom: bundle.inputData.availableFrom,
      recruiterId: bundle.inputData.recruiterId,
      jobTypeIds: bundle.inputData.jobTypeIds,
      preferredStateIds: bundle.inputData.preferredStateIds,
      candidateTypeIds: bundle.inputData.candidateTypeIds,
      licensedStateIds: bundle.inputData.licensedStateIds,
      travelStatus: bundle.inputData.travelStatus,
      candidatePrimaryDivisionId: bundle.inputData.candidatePrimaryDivisionId,
      candidateSecondaryDivisionIds:
        bundle.inputData.candidateSecondaryDivisionIds,
      sendMassEmails: bundle.inputData.sendMassEmails,
      sendMassSms: bundle.inputData.sendMassSms,
    },
  };

  return z.request(options).then((response) => {
    response.throwForStatus();
    const results = response.json;

    // You can do any parsing you need for results here before returning them

    return results;
  });
};

module.exports = {
  key: 'create_candidate',
  noun: 'Candidate',
  display: {
    label: 'Insert Candidate',
    description: 'Inserts Candidate in LaborEge.',
    hidden: false,
  },
  operation: {
    inputFields: [
      {
        key: 'firstName',
        label: 'First Name',
        type: 'string',
        required: true,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'lastName',
        label: 'Last Name',
        type: 'string',
        required: true,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'email',
        label: 'Primary Email',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'phone',
        label: 'Home Phone',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'cellPhone',
        label: 'Primary Phone',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'statusId',
        label: 'Status',
        type: 'integer',
        dynamic: 'list_candidatesStatuses.id.name',
        required: true,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'referralSourceId',
        label: 'Referral Source',
        type: 'string',
        dynamic: 'list_refSource.id.name',
        required: true,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'professionIds',
        label: 'Profession IDs',
        type: 'string',
        dynamic: 'list_professions.id.name',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'specialtyIds',
        label: 'Specialty IDs',
        type: 'string',
        dynamic: 'list_specialties.id.name',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'primarySpecialtyId',
        label: 'Primary Specialty ID',
        type: 'integer',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'addressLine1',
        label: 'Address Line 1',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'addressLine2',
        label: 'Address Line 2',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'stateId',
        label: 'State',
        type: 'string',
        dynamic: 'list_states.id.name',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'city',
        label: 'City',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'zip',
        label: 'Zip',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'countryId',
        label: 'Country',
        type: 'string',
        dynamic: 'list_countries.id.name',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'yearsOfExperience',
        label: 'Years of experience',
        type: 'integer',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'availableFrom',
        label: 'Available from',
        type: 'string',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'recruiterId',
        label: 'Recruiter',
        type: 'integer',
        dynamic: 'list_recruiters.id.name',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'jobTypeIds',
        label: 'Job Type',
        type: 'string',
        choices: ['LOCAL', 'PERDIEM', 'PERM', 'TRAVEL'],
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'preferredStateIds',
        label: 'Preferred State IDs',
        type: 'string',
        dynamic: 'list_states.id.name',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'candidateTypeIds',
        label: 'Candidate Type IDs',
        type: 'string',
        dynamic: 'list_candidateTypes.id.label',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'licensedStateIds',
        label: 'Licensed State Ids',
        type: 'string',
        helpText:
          'inserts into candidate professional license any missing combination of licensedStateIds and professionIds. No inserts id\nlicensedStateIds are empty or null.',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'travelStatus',
        label: 'Travel Status',
        type: 'boolean',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'candidatePrimaryDivisionId',
        label: 'Candidate Primary Division Id',
        type: 'integer',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'candidateSecondaryDivisionIds',
        label: 'Candidate Secondary Division Ids',
        type: 'string',
        required: false,
        list: true,
        altersDynamicFields: false,
      },
      {
        key: 'sendMassEmails',
        label: 'send Mass Emails',
        type: 'boolean',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
      {
        key: 'sendMassSms',
        label: 'Send Mass Sms',
        type: 'boolean',
        required: false,
        list: false,
        altersDynamicFields: false,
      },
    ],
    perform: perform,
  },
};
